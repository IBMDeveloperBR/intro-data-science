{"version":3,"sources":["components/AppForm/AppForm.module.css","components/modals/ChangeCredentials.js","components/AppHeader.js","components/AppForm/AppForm.js","components/Loading.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ChangeCredentials","close","submit","useState","credentials","url","apikey","state","setState","Modal","open","aria-label","iconDescription","primaryButtonText","secondaryButtonText","modalHeading","style","textAlign","onRequestClose","onRequestSubmit","TextInput","marginBottom","id","labelText","placeholder","onChange","e","target","value","AppHeader","props","modal","notification","showModal","errMsg","a","async","console","log","className","kind","title","subtitle","onCloseButtonClick","caption","Date","href","prefix","onClick","window","AppForm","onSubmit","gvap","gvai","gvas","changeInputHandler","event","type","maxValue","parseInt","Form","preventDefault","classes","gvaInput","name","required","Button","Loading","data-loading","viewBox","cx","cy","r","App","loading","setLoading","show","apiResponse","setApiResponse","app","data","fetch","method","headers","body","JSON","stringify","rawResponse","json","res","err","msg","passiveModal","modalAriaLabel","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ccdea8d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gvaInput\":\"AppForm_gvaInput__3ZHap\"};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, TextInput } from 'carbon-components-react';\n\nconst ChangeCredentials = ({ close, submit }) => {\n\n    const initialState = {\n        credentials: {\n            url: \"\",\n            apikey: \"\"\n        }\n    }\n\n    const [state, setState] = useState(initialState);\n\n    return (\n        <div>\n            <Modal\n                open\n                aria-label=\"Trocar Credenciais\"\n                iconDescription=\"Fechar\"\n                primaryButtonText=\"Trocar\"\n                secondaryButtonText=\"Cancelar\"\n                modalHeading=\"Troque suas credenciais do Watson Machine Learning\"\n                style={{ textAlign: \"left\" }}\n                onRequestClose={close}\n                onRequestSubmit={() => submit(state.credentials)}\n            >\n                <TextInput\n                    style={{ marginBottom: \"16px\" }}\n                    id=\"wml-url\"\n                    labelText=\"URL do Watson Machine Learning\"\n                    placeholder=\"Digite a URL...\"\n                    onChange={(e) => setState({ ...state, credentials: { ...state.credentials, url: e.target.value } })}\n                    value={state.credentials.url}\n                />\n                <TextInput\n                    // style={{ marginBottom: \"16px\" }}\n                    id=\"wml-apikey\"\n                    labelText=\"Chave API do Watson Machine Learning\"\n                    placeholder=\"Digite a chave...\"\n                    onChange={(e) => setState({ ...state, credentials: { ...state.credentials, apikey: e.target.value } })}\n                    value={state.credentials.apikey}\n                />\n            </Modal>\n        </div>\n    );\n};\n\nChangeCredentials.propTypes = {\n    close: PropTypes.func.isRequired,\n    submit: PropTypes.func.isRequired\n}\n\nexport default ChangeCredentials;","import React, { useState } from 'react';\nimport {\n    Header,\n    HeaderName,\n    HeaderGlobalBar,\n    HeaderGlobalAction\n} from 'carbon-components-react/lib/components/UIShell';\nimport ChangeCredentials from './modals/ChangeCredentials';\nimport { ToastNotification } from 'carbon-components-react';\nimport GithubIcon32 from '@carbon/icons-react/lib/logo--github/32';\nimport SettingsIcon32 from '@carbon/icons-react/lib/settings/32';\n\nconst AppHeader = (props) => {\n\n    const initialState = {\n        showModal: false,\n        notification: false,\n        errMsg: \"\"\n    };\n\n    const [state, setState] = useState(initialState);\n\n    const onChangeCredentialsHandler = async (credentials) => {\n        // props.setLoading();\n        console.log('Changing credentials:', credentials)\n        setState({ ...state, showModal: false });\n        // const rawResponse = await fetch('/credenciais', {\n        //     method: 'POST',\n        //     headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },\n        //     body: JSON.stringify({\n        //         ...credentials\n        //     })\n        // });\n        // const content = await rawResponse.json();\n        // props.cancel();\n        // if (content.err === true) {\n        //     setState({ showModal: false, notification: \"error\", errMsg: content.msg });\n        // } else {\n        //     setState({ showModal: false, notification: \"success\" });\n        // };\n    };\n\n    let modal;\n    if (state.showModal === true) {\n        modal = <ChangeCredentials\n            close={() => setState({ ...state, showModal: false })}\n            submit={onChangeCredentialsHandler}\n        />;\n    } else {\n        modal = null;\n    };\n\n    let notification;\n    if (notification !== false) {\n        switch (state.notification) {\n            case \"error\":\n                notification = (\n                    <div className=\"modal-settings\">\n                        <ToastNotification\n                            kind=\"error\"\n                            title=\"Erro\"\n                            subtitle={state.errMsg}\n                            iconDescription=\"Fechar\"\n                            onCloseButtonClick={() => setState({ ...state, notification: false, errMsg: \"\" })}\n                            caption={Date()}\n                        />\n                    </div>\n                );\n                break;\n            case \"success\":\n                notification = (\n                    <div className=\"modal-settings\">\n                        <ToastNotification\n                            kind=\"success\"\n                            title=\"Sucesso\"\n                            subtitle=\"Modelo alterado com sucesso.\"\n                            iconDescription=\"Fechar\"\n                            onCloseButtonClick={() => setState({ ...state, notification: false })}\n                            caption={Date()}\n                        />\n                    </div>\n                );\n                break;\n            default:\n                notification = null;\n                break;\n        }\n    } else {\n        notification = null;\n    }\n\n    return (\n        <Header aria-label=\"IBM Digital Chistmas Challenge\">\n            {modal}\n            {notification}\n            <HeaderName href=\"https://developer.ibm.com\" target=\"_blank\" prefix=\"IBM\">\n                Developer Ecossystem Group\n            </HeaderName>\n            <HeaderGlobalBar>\n                <HeaderGlobalAction aria-label=\"Github\" onClick={() => window.open(\"https://github.com/ibmdeveloperbr/intro-data-science\")}>\n                    <GithubIcon32 />\n                </HeaderGlobalAction>\n                <HeaderGlobalAction aria-label=\"Settings\" onClick={() => setState({ ...state, showModal: true })}>\n                    <SettingsIcon32 />\n                </HeaderGlobalAction>\n            </HeaderGlobalBar>\n        </Header>\n    );\n};\n\nexport default AppHeader;","import { Form, TextInput, Button } from 'carbon-components-react';\nimport React, { useState } from 'react';\nimport classes from './AppForm.module.css';\n\nconst AppForm = ({ onSubmit }) => {\n    const initialState = {\n        gvap: 0,\n        gvai: 0,\n        gvas: 0\n    };\n    const [state, setState] = useState(initialState);\n\n    const changeInputHandler = (event, type) => {\n        let value = parseInt(event.target.value);\n        let maxValue;\n        if (type === 'gvap')\n            maxValue = 2000000;\n        else if (type === 'gvai')\n            maxValue = 15000000;\n        else\n            maxValue = 10000000;\n        if (!value)\n            value = 0;\n        else if (value < 0)\n            value = 0;\n        else if (value > maxValue)\n            value = maxValue;\n\n        setState({ ...state, [type]: value });\n    };\n\n    const submitHandler = async (e) => {\n        e.preventDefault();\n        await onSubmit(state);\n    };\n\n    return (\n        <Form onSubmit={submitHandler}>\n            <TextInput className={classes.gvaInput} labelText=\"GVA público em milhares de reais (0~2mi)\" name=\"GVA-p\" id=\"GVA-p\" required value={state.gvap} onChange={e => changeInputHandler(e, 'gvap')} />\n            <TextInput className={classes.gvaInput} labelText=\"GVA de serviços em milhares de reais (0~10mi)\" name=\"GVA-s\" id=\"GVA-s\" required value={state.gvas} onChange={e => changeInputHandler(e, 'gvas')} />\n            <TextInput className={classes.gvaInput} labelText=\"GVA industrial em milhares de reais (0~15mi)\" name=\"GVA-i\" id=\"GVA-i\" required value={state.gvai} onChange={e => changeInputHandler(e, 'gvai')} />\n            <Button type=\"submit\">Enviar</Button>\n        </Form>\n    );\n};\n\nexport default AppForm;","import React from 'react';\n\nconst Loading = () => {\n    return (\n        // <div className=\"loading--hover\">\n        <div data-loading className=\"bx--loading\">\n            <svg className=\"bx--loading__svg\" viewBox=\"-75 -75 150 150\">\n                <title>Loading</title>\n                <circle className=\"bx--loading__stroke\" cx=\"0\" cy=\"0\" r=\"37.5\" />\n            </svg>\n        </div>\n        // </div>\n    );\n};\n\nexport default Loading;","import React, { useState } from 'react';\nimport { Modal } from 'carbon-components-react';\nimport Header from './components/AppHeader';\nimport Form from './components/AppForm/AppForm';\nimport Loading from './components/Loading';\nimport './App.css';\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [apiResponse, setApiResponse] = useState({ show: false, value: '' });\n\n  const formSubmitHandler = async (data) => {\n    setLoading(true);\n    const rawResponse = await fetch('/predicao', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    const res = await rawResponse.json();\n    console.log(res);\n    setLoading(false);\n    if (res.err === true)\n      setApiResponse({ show: true, value: res.msg });\n    else\n      setApiResponse({ show: true, value: res.value + \" habitantes.\" });\n  };\n\n  let app = <Form onSubmit={formSubmitHandler} />;\n  if (loading === true) {\n    app = <Loading />;\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"screen\">\n        <h1>Introdução a Data Science - Predição de número de habitantes</h1>\n        {app}\n        <Modal\n          open={apiResponse.show} passiveModal={true}\n          modalHeading=\"Predição\"\n          modalAriaLabel=\"Resultado da chamada API\"\n          onRequestClose={() => setApiResponse({ show: false, value: '' })} >\n          <p>{apiResponse.value}</p>\n        </Modal>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}